import numpy as np

from classes import Orbit


def runge_kutta_4(f, t0: float, y0: np.ndarray, h, n: int, orbit: Orbit):
    """
    Метод Рунге-Кутта 4-го порядка для решения системы дифференциальных уравнений

    Аргументы:
    f: функция, описывающая систему дифференциальных уравнений
       Принимает аргументы t и y и возвращает массив значений производных dy/dx
    t0: начальное значение t
    y0: начальное значение y (массив значений)
    h: шаг интегрирования
    n: количество шагов
    orbit: класс Orbit
    """

    # Создаем массивы для хранения результатов
    t = np.zeros(n + 1)
    y = np.zeros((n + 1, len(y0)))

    # Записываем начальные значения
    t[0] = t0
    y[0] = y0

    # Итерационный процесс метода Рунге-Кутта 4-го порядка
    for i in range(n):
        k1 = f(t[i], y[i])
        k2 = f(t[i] + h / 2, y[i] + h / 2 * k1)
        k3 = f(t[i] + h / 2, y[i] + h / 2 * k2)
        k4 = f(t[i] + h, y[i] + h * k3)

        t[i + 1] = t[i] + h
        y[i + 1] = y[i] + (k1 + 2 * k2 + 2 * k3 + k4) * h / 6

    orbit.add_results(t=t, y=y)


